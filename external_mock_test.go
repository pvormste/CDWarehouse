// Code generated by MockGen. DO NOT EDIT.
// Source: external.go

// Package warehouse is a generated GoMock package.
package warehouse

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentProvider is a mock of PaymentProvider interface.
type MockPaymentProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentProviderMockRecorder
}

// MockPaymentProviderMockRecorder is the mock recorder for MockPaymentProvider.
type MockPaymentProviderMockRecorder struct {
	mock *MockPaymentProvider
}

// NewMockPaymentProvider creates a new mock instance.
func NewMockPaymentProvider(ctrl *gomock.Controller) *MockPaymentProvider {
	mock := &MockPaymentProvider{ctrl: ctrl}
	mock.recorder = &MockPaymentProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentProvider) EXPECT() *MockPaymentProviderMockRecorder {
	return m.recorder
}

// ProcessPayment mocks base method.
func (m *MockPaymentProvider) ProcessPayment() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment")
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockPaymentProviderMockRecorder) ProcessPayment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockPaymentProvider)(nil).ProcessPayment))
}

// MockChartsProvider is a mock of ChartsProvider interface.
type MockChartsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockChartsProviderMockRecorder
}

// MockChartsProviderMockRecorder is the mock recorder for MockChartsProvider.
type MockChartsProviderMockRecorder struct {
	mock *MockChartsProvider
}

// NewMockChartsProvider creates a new mock instance.
func NewMockChartsProvider(ctrl *gomock.Controller) *MockChartsProvider {
	mock := &MockChartsProvider{ctrl: ctrl}
	mock.recorder = &MockChartsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChartsProvider) EXPECT() *MockChartsProviderMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockChartsProvider) Notify(title, artist string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", title, artist, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockChartsProviderMockRecorder) Notify(title, artist, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockChartsProvider)(nil).Notify), title, artist, amount)
}

// PositionAndPriceForAlbum mocks base method.
func (m *MockChartsProvider) PositionAndPriceForAlbum(title, artist string) (int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PositionAndPriceForAlbum", title, artist)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// PositionAndPriceForAlbum indicates an expected call of PositionAndPriceForAlbum.
func (mr *MockChartsProviderMockRecorder) PositionAndPriceForAlbum(title, artist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionAndPriceForAlbum", reflect.TypeOf((*MockChartsProvider)(nil).PositionAndPriceForAlbum), title, artist)
}
